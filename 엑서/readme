"""
print() funtion
"""

print("Hello World!")
print(100)
pi = 3.14
print(pi)

intro = "My name is "
name = "Woo jin"
print(intro + name + "!")

"""
variables
"""

Comment or annotation
Define a name

user_name = "woo jin jung "
user_id = 201855057
user_age = 23
print("my name is:",user_name)
print("my id is:",user_id)
print("my age is",user_age)

"""
Data Types: Integers
"""

집에 있는 사물의 객수를 세 가지 이상의 정수 변수로 표현하시오.

computer = 2
cup = 1
phone = 1
tables = 1
broken_computer = 1

"""
Data Types: Real Numbers
"""

본인이 알고 있는 세 개의 실수를 변수로 정의하시오.

i_phone_12pro_size_high = 14.3
i_phone_12pro_size_wide = 7.4
PI = 3.14
My_tall = 173.2

print(i_phone_12pro_size_high)
print(i_phone_12pro_size_wide)
print(PI)
print(My_tall)

"""
Data Types: Strings
"""

favorite_game = "league of legend"
favorite_friend = "S.J"
favorite_number = "32"

본인이 좋아하는 세 가지를 문자열로 정의하시오.

print(" favorite game is:",favorite_game + " favorite friend is:", favorite_friend + " favorite number is:", favorite_number + "!")

counter = 0
counter += 10
print(counter)

"""
x-Equals Operations
"""

x = 4
x *= 4
x += 8
print(x)


"""
Boolean Values
"""

is_tested = True
is_passed = False

print("우진이는 정처기 시험을 응시했는가?",is_tested)

print("우진이는 정처기 시험을 통과했는가?",is_passed)

print(type(is_passed))

a = 3
b = 3.14
c = 'c'
print(type(a))
print(type(b))
print(type(c))

print("Yes" == 'Yes')
print((2>1) == (5<10))
c ='2'
d = 2
print(c == d)

True or True # True
True or False # True
False or False # Flase
1 < 2 or 3 < 1 # True
3 < 1 or 1 > 6 # Flase
1 == 1 or 1 < 2 # True

"""
Conditional statement (if/elif/else)
"""

puppy = "mts"
age = 1
is_yes = False

if puppy == "mts":
print("말티즈.")
is_yes = True

if age < 3:
    print("새끼 말티즈")


elif puppy == "pd":
print("푸들")
is_yes = True
elif puppy == "sc":
print("시츄")
is_yes = True
else:
print("아! mtp구나")
is_yes = True
print(is_yes)

"""
Try/Except 문
"""
x = 1
try:
print(y)
print(x)
except:
print('[Error]')
print("contiue")

"""
Lists
"""

primes = [2,3,5,7,11]
print(primes)

empty_list = []
print(empty_list)

"""
Mulriple different data types
"""

mixed = ['Jenny',1,1.4,True]
print(mixed)
list_of_lists = [['a',1],['b',2]]
print(list_of_lists)

"""
Zero-Indexing
"""

names = ['Woojin','Jinwoo','Ssuckjin','jungyup']
print(names[0])
print(names[1])
print(names[2])
print(names[3])

"""
Negative Indices
"""
print(names[-1]) #(-1)>Last data
print(names[-2]) 
print(names[-3])
print(names[-4])

"""
List Slicing
"""

numbers = ['1','2','3','4','5','6','7']
select_numbers = numbers[1:4]
print(numbers[2:])
print(numbers[:4])
print(numbers[:])
print(select_numbers)

hsu_buildings = ['만우관','장공관','필헌관','소통관','송암관','늦봄관','장준하통일관']
building_slice = hsu_buildings[1:4]
print(hsu_buildings[2:])
print(hsu_buildings[:4])
print(hsu_buildings[:])
print(building_slice)

"""
Dimensional List
"""
restaurants = [['해우리','한식','고S'],['짜장명가','중식','중화비빔밤'],['찌개동아리','한식','제육전골'],['맘스터치','양식','싸이버거']]
print(restaurants)

print(restaurants[1][1])
restaurants[0][2] = '해우라면'
print(restaurants[0][2])
print(restaurants)

"""
Adding Lists Together
"""

items_one = ['cake','cookie','bread']
items_two = ['biscuit','tart']

total_items = items_one + items_two
print(total_items)

"""
Useful Methods for Lists
"""

#Len()은 리스트의 크기(개수)를 나타냄
Knapsack = [2,4,3,7,10]
size = len(Knapsack)
print(size)

#count()는 특정 아이템의 개수를 나타냄
backpack = ['pencil','pen','notebook','textbook','pen','highlighter','pen']
numPen = backpack.count('pen') #count는 아이템의 개수를 나타냄
print(numPen)

#append()는 리스트의 끝에 아이템 추가
orders = ['daisies','periwinkle']
orders.append('tulips') 
print(orders)

#insert()는 특정 위치에 아이템을 추가
store_line = ['Karla','Maxium','Martin','Isabella']
store_line.insert(2,'Woojin') 
print(store_line)

#pop()은특정 위치의 아이템을 삭제
sw_subjexts = ['C Programming','Calculus','Data Engineering','Data Structures','Machine Learning']
sw_subjexts.pop(1)
sw_subjexts.pop() #NULL은 리스트의 마지막 아이템을 삭제
sw_subjexts.remove('Data Structures')#특정 아이템만 삭제
print(sw_subjexts)

#sort()는 정렬시켜줌
numbers =[4,2,1,5,6,3]
print(numbers)
numbers.sort()
print(numbers)

hsu_buildings = ['만우관','장공관','필헌관','소통관','송암관','늦봄관','장준하통일관']
print(hsu_buildings)
hsu_buildings.sort()
print(hsu_buildings)

#sorted()는 원본 리스트를 유지시킬 수 있음
names = ['Woojin','Jinwoo','Ssuckjin','jungyup']
print(names)
sorted_names = sorted(names)
print(sorted_names)
